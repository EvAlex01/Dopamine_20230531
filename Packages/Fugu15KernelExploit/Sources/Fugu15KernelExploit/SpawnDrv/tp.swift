//
//  arm64Handler.swift
//  Fugu15KernelExploit/SpawnDrv
//
//  Created by Linus Henze.
//  Copyright Â© 2022 Pinauten GmbH. All rights reserved.
//

import Foundation
import Darwin

// Swift wrapper for some Mach APIs

class Task {
    var tp: mach_port_t
    
    var threads: [Thread] {
        var threadList: thread_act_array_t!
        var thCount: mach_msg_type_number_t = 0
        guard task_threads(tp, &threadList, &thCount) == KERN_SUCCESS,
              threadList != nil,
              thCount >= 1 else {
            return []
        }
        
        var res = [Thread]()
        for i in 0..<Int(thCount) {
            res.append(Thread(tp: threadList[i]))
        }
        
        vm_deallocate(mach_task_self_, UInt(bitPattern: threadList), vm_size_t(MemoryLayout<thread_act_t>.size * Int(thCount)))
        
        return res
    }
    
    init(tp: mach_port_t) {
        self.tp = tp
    }
    
    static func forPID(_ pid: pid_t) -> Task? {
        var tp: mach_port_name_t = 0
        guard task_for_pid(mach_task_self_, pid, &tp) == KERN_SUCCESS else {
            return nil
        }
        
        return Task(tp: tp)
    }
    
    func read(addr: UInt64, size: Int) -> Data? {
        var data = Data(repeating: 0, count: size)
        var len = vm_size_t(size)
        
        let kr = data.withUnsafeMutableBytes { (ptr: UnsafeMutableRawBufferPointer) in
            vm_read_overwrite(tp, vm_address_t(addr), vm_size_t(size), vm_address_t(UInt(bitPattern: ptr.baseAddress!)), &len)
        }
        
        guard kr == KERN_SUCCESS else {
            return nil
        }
        
        return data.trySubdata(in: 0..<Int(len))
    }
    
    func r64(_ addr: UInt64) -> UInt64 {
        return read(addr: addr, size: 8)!.getGeneric(type: UInt64.self)
    }
    
    func r32(_ addr: UInt64) -> UInt32 {
        return read(addr: addr, size: 4)!.getGeneric(type: UInt32.self)
    }
    
    func write(addr: UInt64, data: Data) {
        _ = data.withUnsafeBytes { (ptr: UnsafeRawBufferPointer) in
            vm_write(tp, vm_address_t(addr), vm_offset_t(UInt(bitPattern: ptr.baseAddress!)), mach_msg_type_number_t(ptr.count))
        }
    }
    
    func w8(_ addr: UInt64, _ value: UInt8) {
        write(addr: addr, data: Data(fromObject: value))
    }
    
    func w64(_ addr: UInt64, _ value: UInt64) {
        write(addr: addr, data: Data(fromObject: value))
    }
    
    func suspend() {
        task_suspend(tp)
    }
    
    func resume() {
        task_resume(tp)
    }
}

class Thread {
    var tp: mach_port_t
    
    init(tp: mach_port_t) {
        self.tp = tp
    }
    
    func getState<S>(type: Int32) -> S? {
        let state = UnsafeMutablePointer<S>.allocate(capacity: 1)
        var stateLen = mach_msg_type_number_t(MemoryLayout.size(ofValue: state.pointee) >> 2)
        guard thread_get_state(tp, type, thread_state_t(bitPattern: UInt(bitPattern: state)), &stateLen) == KERN_SUCCESS else {
            return nil
        }
        
        let res = state.pointee
        state.deallocate()
        
        return res
    }
    
    func setState<S>(type: Int32, state: S) -> Bool {
        var state = state
        let stateLen = mach_msg_type_number_t(MemoryLayout.size(ofValue: state) >> 2)
        let kr = withUnsafeMutablePointer(to: &state) { ptr -> kern_return_t in
            return thread_set_state(tp, type, thread_state_t(bitPattern: UInt(bitPattern: ptr)), stateLen)
        }
        
        return kr == KERN_SUCCESS
    }
}
